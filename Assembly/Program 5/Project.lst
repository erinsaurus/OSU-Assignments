Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/28/17 12:14:17
)Sorting Random Integers (CS271_Prog5.asm		     Page 1 - 1


				TITLE Sorting Random Integers (CS271_Prog5.asm)

				; Author: Erin Alltop
				; Email: alltope@oregonstate.edu
				; Course / Project ID: CS271-400 / Program 5                
				; Due Date: 5-28-17
				; Description: This program generates random numbers in the range [100 ... 999], displays the unsorted list
				; of numbers, and then sorts the list in descending order (i.e. largest first), calculates and displays the median
				; value, rounded to the nearest integer, and displayed the sorted list, 10 numbers per line.
				; ***NOTE: The sortList procedure algorithm was adapted from the Kip R. Irvine textbook  - Bubble Sort
				; method on page 375, section 9.5***

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)

 = 000000C8			MAX = 200;	
 = 0000000A			MIN = 10;
 = 00000064			LO = 100;
 = 000003E7			HI = 999;

 00000000			.data

 00000000 53 6F 72 74 69	progName	BYTE	"Sorting Random Integers", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 00
 00000018 50 72 6F 67 72	progAuth	BYTE	"Programmed by Erin Alltop", 0
	   61 6D 6D 65 64
	   20 62 79 20 45
	   72 69 6E 20 41
	   6C 6C 74 6F 70
	   00
 00000032 54 68 69 73 20	instr1		BYTE	"This program generates random numbers in range [100 .. 999], displays the original list, sorts the list, ", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 72 61 6E 67
	   65 20 5B 31 30
	   30 20 2E 2E 20
	   39 39 39 5D 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6F
	   72 69 67 69 6E
	   61 6C 20 6C 69
	   73 74 2C 20 73
	   6F 72 74 73 20
	   74 68 65 20 6C
	   69 73 74 2C 20
	   00
 0000009C 61 6E 64 20 63	instr2		BYTE	"and caluculates and displays the median value. Lastly, it displays the sorted list in descending order. ", 0
	   61 6C 75 63 75
	   6C 61 74 65 73
	   20 61 6E 64 20
	   64 69 73 70 6C
	   61 79 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2E 20 4C 61 73
	   74 6C 79 2C 20
	   69 74 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 73 6F 72 74
	   65 64 20 6C 69
	   73 74 20 69 6E
	   20 64 65 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2E 20 00
 00000105 50 69 63 6B 20	instr3		BYTE	"Pick a number within the [10 .. 200] range to be generated. ", 0
	   61 20 6E 75 6D
	   62 65 72 20 77
	   69 74 68 69 6E
	   20 74 68 65 20
	   5B 31 30 20 2E
	   2E 20 32 30 30
	   5D 20 72 61 6E
	   67 65 20 74 6F
	   20 62 65 20 67
	   65 6E 65 72 61
	   74 65 64 2E 20
	   00
 00000142 45 6E 74 65 72	instr4		BYTE	"Enter how many numbers should be generated: ", 0
	   20 68 6F 77 20
	   6D 61 6E 79 20
	   6E 75 6D 62 65
	   72 73 20 73 68
	   6F 75 6C 64 20
	   62 65 20 67 65
	   6E 65 72 61 74
	   65 64 3A 20 00
 0000016F 4F 75 74 20 6F	oops1		BYTE	"Out of range. Pick a number within the [10 .. 200] range. ", 0
	   66 20 72 61 6E
	   67 65 2E 20 50
	   69 63 6B 20 61
	   20 6E 75 6D 62
	   65 72 20 77 69
	   74 68 69 6E 20
	   74 68 65 20 5B
	   31 30 20 2E 2E
	   20 32 30 30 5D
	   20 72 61 6E 67
	   65 2E 20 00
 000001AA 54 68 61 74 27	goodbye 	BYTE	"That's all for now! Goodbye. ", 0
	   73 20 61 6C 6C
	   20 66 6F 72 20
	   6E 6F 77 21 20
	   47 6F 6F 64 62
	   79 65 2E 20 00
 000001C8 00000000		request		DWORD	?
 000001CC  000000C8 [		intArray	DWORD	MAX DUP(?)		
	    00000000
	   ]
 000004EC 55 6E 73 6F 72	unsorted	BYTE	"Unsorted List of Random Numbers: ", 0
	   74 65 64 20 4C
	   69 73 74 20 6F
	   66 20 52 61 6E
	   64 6F 6D 20 4E
	   75 6D 62 65 72
	   73 3A 20 00
 0000050E 53 6F 72 74 65	sorted		BYTE	"Sorted List of Random Numbers: ", 0
	   64 20 4C 69 73
	   74 20 6F 66 20
	   52 61 6E 64 6F
	   6D 20 4E 75 6D
	   62 65 72 73 3A
	   20 00
 0000052E 20 20 20 20 00	spaces		BYTE	"    ", 0
 00000533 54 68 65 20 6D	median		BYTE	"The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 00000543 00000000		medianNum	DWORD	?
 00000547 00000000		evenTest	DWORD	?
 0000054B 00000000		secMedian	DWORD	?


				; (insert variable definitions here)

 00000000			.code
 00000000			main PROC

				; Introduction and instructions
 00000000  68 00000000 R		push	OFFSET progName
 00000005  68 00000018 R		push	OFFSET progAuth
 0000000A  68 00000032 R		push	OFFSET instr1
 0000000F  68 0000009C R		push	OFFSET instr2
 00000014  68 00000105 R		push	OFFSET instr3
 00000019  E8 0000007B			call	introduction

				; Get the user data and validate
 0000001E  68 00000142 R		push	OFFSET instr4
 00000023  E8 000000C8			call	getUserData

				; Randomize numbers and fill the array
 00000028  68 000001CC R		push	OFFSET intArray
 0000002D  FF 35 000001C8 R		push	request
 00000033  E8 000000F6			call	fillArray

				; Display the unsorted array to the user
 00000038  68 000001CC R		push	OFFSET intArray
 0000003D  FF 35 000001C8 R		push	request
 00000043  68 000004EC R		push	OFFSET unsorted
 00000048  E8 00000178			call	displayList

				; Sort the array in descending order
 0000004D  8B 0D 000001C8 R		mov		ecx, request
 00000053  49				dec		ecx
 00000054  68 000001CC R		push	OFFSET intArray
 00000059  E8 000000FA			call	sortList

				; Calculate and display the median to the user
 0000005E  FF 35 000001C8 R		push	request
 00000064  68 000001CC R		push	OFFSET intArray
 00000069  68 00000533 R		push	OFFSET median
 0000006E  E8 00000102			call	displayMedian

				; Display the sorted array to the user in descending order
 00000073  68 000001CC R		push	OFFSET intArray
 00000078  FF 35 000001C8 R		push	request
 0000007E  68 0000050E R		push	OFFSET sorted
 00000083  E8 0000013D			call	displayList

				; All done. Say goodbye!
 00000088  68 000001AA R		push	OFFSET goodbye
 0000008D  E8 00000186			call	farewell


					exit	; exit to operating system
 00000092  6A 00	   *	    push   +000000000h
 00000094  E8 00000000 E   *	    call   ExitProcess
 00000099			main ENDP


				;**************************************************************
				; Procedure to introduce program to user
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				;**************************************************************

 00000099			introduction PROC
 00000099  55				push	ebp						;setup the stack frame
 0000009A  8B EC			mov		ebp, esp
 0000009C  8B 55 18			mov		edx, [ebp+24]
 0000009F  E8 00000000 E		call	WriteString				; display program name
 000000A4  E8 00000000 E		call	CrLf

 000000A9  8B 55 14			mov		edx, [ebp+20]
 000000AC  E8 00000000 E		call	WriteString				; display author name
 000000B1  E8 00000000 E		call	CrLf
 000000B6  E8 00000000 E		call	CrLf

 000000BB  8B 55 10			mov		edx, [ebp+16]
 000000BE  E8 00000000 E		call	WriteString				; program description1
 000000C3  E8 00000000 E		call	CrLf

 000000C8  8B 55 0C			mov		edx, [ebp+12]
 000000CB  E8 00000000 E		call	WriteString				; program description2
 000000D0  E8 00000000 E		call	CrLf
 000000D5  E8 00000000 E		call	CrLf

 000000DA  8B 55 08			mov		edx, [ebp+8]
 000000DD  E8 00000000 E		call	WriteString				; instruction1
 000000E2  E8 00000000 E		call	CrLf
 000000E7  E8 00000000 E		call	CrLf

 000000EC  5D				pop		ebp
 000000ED  C2 0010			ret		16
 000000F0			introduction ENDP 

				;**************************************************************
				; Procedure to get data from the user
				; receives: request (reference)
				; returns:  user input is in request variable
				; preconditions: none
				; registers changed: edx
				; *************************************************************

 000000F0			getUserData PROC
 000000F0  55				push	ebp						; setup the stack frame
 000000F1  8B EC			mov		ebp, esp

 000000F3  8B 55 08			mov		edx, [ebp+8]
 000000F6  E8 00000000 E		call	WriteString

 000000FB  E8 00000000 E		call	ReadInt					; obtaining user input
 00000100  E8 00000009			call	validate				; call validate procedure
 00000105  A3 000001C8 R		mov		request, eax
 0000010A  5D				pop		ebp
 0000010B  C2 0008			ret		8
					
				; *********************************************************************
; Procedure to validate user input
				; receives: none
				; returns: none
				; preconditions: user has inputed data
				; registers changed: eax, edx
				; *********************************************************************

 0000010E			validate PROC	
 0000010E  83 F8 0A		L1:	cmp		eax, MIN		; compare upper limit, jump to OOPS label if less than
 00000111  7C 09			jl		OOPS
 00000113  3D 000000C8			cmp		eax, MAX		; compare lower limit, jump to OOPS label if greater than
 00000118  7F 02			jg		OOPS
 0000011A  EB 11			jmp		GOOD			; move on if ok

 0000011C			OOPS: 
 0000011C  BA 0000016F R		mov		edx, OFFSET oops1		; error text and requesting new input
 00000121  E8 00000000 E		call	WriteString
 00000126  E8 00000000 E		call	ReadInt					; read new input and jump to top of validation procedure
 0000012B  EB E1			jmp		L1

 0000012D			GOOD:
 0000012D  C3				ret
 0000012E			validate ENDP	
 0000012E			getUserData ENDP

				;**************************************************************
				; fill array {parameters: request (value), array (reference)}
				; Procedure to fill the array
				; receives: request (value), array (reference)
				; returns:  array is filled with random numbers
				; preconditions: array created, request/user input is initialized
				; HI and LO global variables are set
				; registers changed: edx, ecx, eax, edi
				; *************************************************************

 0000012E			fillArray PROC
 0000012E  55				push	ebp				; setup stack frame
 0000012F  8B EC			mov		ebp, esp	
 00000131  8B 75 0C			mov		esi, [ebp+12]	; move array to point to esi
 00000134  8B 4D 08			mov		ecx, [ebp+8]	; move user variable to ecx for counter
 00000137  E8 00000000 E		call	Randomize		; Irvine Randomize seed

 0000013C			KeepGoing:
 0000013C  B8 000003E7			mov		eax, HI			; range = HI - LO + 1
 00000141  83 E8 64			sub		eax, LO
 00000144  40				inc		eax
 00000145  E8 00000000 E		call	RandomRange		; Irvine RandomRange procedure
 0000014A  83 C0 64			add		eax, LO			; Add LO to eax

 0000014D  89 06			mov		[esi], eax		; move random number to array location
 0000014F  83 C6 04			add		esi, 4			; move to next array location (DWORD = 4 BYTES)
 00000152  E2 E8			loop	KeepGoing		

 00000154  5D				pop		ebp
 00000155  C2 0008			ret		8
 00000158			fillArray ENDP

				;**************************************************************
				; Procedure to sort the array
				; receives: array(reference), request(value)
				; returns: sorted array
				; preconditions: array is initialized and filled, user input 
				; is valid and initialized
				; registers changed: ecx, esi, ebp, eax
				; ***This algorithm was adapted from the Irvine textbook Bubble Sort
				; method on page 375, section 9.5**
				; *************************************************************

 00000158			sortList PROC
 00000158  55				push	ebp				;setup stack frame
 00000159  8B EC			mov		ebp, esp	

 0000015B			OuterLoop:					;setup the outer loop with ecx
 0000015B  51				push	ecx
 0000015C  8B 75 08			mov		esi, [ebp+8]	; move the array (reference) pointer to esi

 0000015F			InnerLoop:
 0000015F  8B 06			mov		eax, [esi]		; move first value of array to eax register
 00000161  39 46 04			cmp		[esi+4], eax	; compare first value to second (esi+4 is second value because DWORD = 4 bytes)
 00000164  7C 05			jl		noSwap			; if less than, then no swap is necessary, jump to noSwap label
 00000166  87 46 04			xchg	eax, [esi+4]	; if not less than, swap the two numbers
 00000169  89 06			mov		[esi], eax		; move value in eax register to first location

 0000016B			noSwap:
 0000016B  83 C6 04			add		esi, 4			; if no swap is necessary, add 4 to esi register (to move to next element)
 0000016E  E2 EF			loop	InnerLoop		; continue inner loop

 00000170  59				pop		ecx				; retore ecx loop count for outer loop
 00000171  E2 E8			loop	OuterLoop

 00000173  5D				pop		ebp
 00000174  C3				ret
 00000175			sortList ENDP


				;**************************************************************
				; Procedure to display the median of the random numbers
				; receives: array(reference), request (value)
				; returns: median of the array is displayed
				; preconditions: array is initialized and filled, request is 
				; initialized
				; registers changed:
				; *************************************************************

 00000175			displayMedian PROC
 00000175  55				push	ebp				;setup stack frame
 00000176  8B EC			mov		ebp, esp
 00000178  E8 00000000 E		call	CrLf

				; Divide to find middle number
 0000017D  8B 45 10			mov		eax, [ebp+16]	; divide request by 2 to find middle number
 00000180  99				cdq
 00000181  BB 00000002			mov		ebx, 2
 00000186  F7 F3			div		ebx				; eax = divisor of division statement / edx = remainder
 00000188  89 15 00000547 R		mov		evenTest, edx	; store remainder in variable
 0000018E  A3 00000543 R		mov		medianNum, eax	; store divisor




				; Multiply result by 4 to find element location in array
 00000193  A1 00000543 R		mov		eax, medianNum
 00000198  BB 00000004			mov		ebx, 4
 0000019D  F7 E3			mul		ebx				; eax = divisor * 4 (multiplying by 4 to find location of element in array)
 0000019F  A3 00000543 R		mov		medianNum, eax		; store result in variable


				; Display title and median to screen
 000001A4  8B 75 0C			mov		esi, [ebp+12]	; move array to point to esi
 000001A7  03 35 00000543 R		add		esi, medianNum		; find location of element in array
 000001AD  8B 55 08			mov		edx, [ebp+8]
 000001B0  E8 00000000 E		call	WriteString		; display title for median number
 000001B5  8B 06			mov		eax, [esi]
 000001B7  E8 00000000 E		call	writeDec		; print median number
 000001BC  E8 00000000 E		call	CrLf 

 000001C1  5D				pop		ebp
 000001C2  C2 0004			ret		4
 000001C5			displayMedian ENDP


				;**************************************************************
				; Procedure to display the Arrray
				; receives: array (reference), request (value), title (reference)
				; returns: 
				; preconditions: array is filled, user input intialized
				; registers changed: esi, ecx, edx, ebx
				; *************************************************************

 000001C5			displayList PROC
 000001C5  55				push	ebp					;setup the stack frame
 000001C6  8B EC			mov		ebp, esp
 000001C8  8B 75 10			mov		esi, [ebp+16]		; move @intArray to esi
 000001CB  8B 4D 0C			mov		ecx, [ebp+12]		; move user input to ecx for loop
 000001CE  8B 55 08			mov		edx, [ebp+8]		; move title to edx
 000001D1  BB 00000000			mov		ebx, 0				; 0 out ebx
 000001D6  E8 00000000 E		call	CrLf	
 000001DB  E8 00000000 E		call	WriteString			; display title 
 000001E0  E8 00000000 E		call	CrLf

 000001E5			KeepGoing:
 000001E5  43				inc		ebx					
 000001E6  8B 06			mov		eax, [esi]			; move current element to eax and write to screen
 000001E8  E8 00000000 E		call	WriteDec		
 000001ED  83 C6 04			add		esi, 4				; increment to esi to next element in the array
 000001F0  83 FB 0A			cmp		ebx, 10				; if ebx = 10, jump to add a line and reset ebx to 0, else jump to add spaces
 000001F3  74 02			je		AddLine
 000001F5  75 0C			jne		AddSpaces

 000001F7			AddLine:
 000001F7  E8 00000000 E		call	CrLf
 000001FC  BB 00000000			mov		ebx, 0
 00000201  EB 0A			jmp		MoveOn

 00000203			AddSpaces:
 00000203  BA 0000052E R		mov		edx, OFFSET spaces
 00000208  E8 00000000 E		call	WriteString

 0000020D			MoveOn:
 0000020D  E2 D6			loop	KeepGoing
 0000020F  E8 00000000 E		call	CrLf

 00000214  5D				pop		ebp
 00000215  C2 000C			ret		12
 00000218			displayList ENDP

				;**************************************************************
				; Procedure to say goodbye to the user
				; receives: goodbye message
				; returns: none
				; preconditions: none 
				; registers changed: edx
				; *************************************************************

 00000218			farewell PROC
 00000218  55				push	ebp						;setup the stack frame
 00000219  8B EC			mov		ebp, esp
 0000021B  8B 55 08			mov		edx, [ebp+8]
 0000021E  E8 00000000 E		call	CrLf
 00000223  E8 00000000 E		call	WriteString				; say goodbye - see ya!
 00000228  E8 00000000 E		call	CrLf
 0000022D  E8 00000000 E		call	CrLf
 00000232  5D				pop		ebp
 00000233  C2 0004			ret		4

 00000236			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    05/28/17 12:14:17
)Sorting Random Integers (CS271_Prog5.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000054F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000236 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 000001C5 _TEXT	Length= 00000053 Public STDCALL
  KeepGoing  . . . . . . . . . .	L Near	 000001E5 _TEXT	
  AddLine  . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  AddSpaces  . . . . . . . . . .	L Near	 00000203 _TEXT	
  MoveOn . . . . . . . . . . . .	L Near	 0000020D _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000175 _TEXT	Length= 00000050 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000218 _TEXT	Length= 0000001E Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 0000012E _TEXT	Length= 0000002A Public STDCALL
  KeepGoing  . . . . . . . . . .	L Near	 0000013C _TEXT	
getUserData  . . . . . . . . . .	P Near	 000000F0 _TEXT	Length= 0000003E Public STDCALL
introduction . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 00000057 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000099 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000158 _TEXT	Length= 0000001D Public STDCALL
  OuterLoop  . . . . . . . . . .	L Near	 0000015B _TEXT	
  InnerLoop  . . . . . . . . . .	L Near	 0000015F _TEXT	
  noSwap . . . . . . . . . . . .	L Near	 0000016B _TEXT	
validate . . . . . . . . . . . .	P Near	 0000010E _TEXT	Length= 00000020 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000010E _TEXT	
  OOPS . . . . . . . . . . . . .	L Near	 0000011C _TEXT	
  GOOD . . . . . . . . . . . . .	L Near	 0000012D _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
evenTest . . . . . . . . . . . .	DWord	 00000547 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000001AA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instr1 . . . . . . . . . . . . .	Byte	 00000032 _DATA	
instr2 . . . . . . . . . . . . .	Byte	 0000009C _DATA	
instr3 . . . . . . . . . . . . .	Byte	 00000105 _DATA	
instr4 . . . . . . . . . . . . .	Byte	 00000142 _DATA	
intArray . . . . . . . . . . . .	DWord	 000001CC _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianNum  . . . . . . . . . . .	DWord	 00000543 _DATA	
median . . . . . . . . . . . . .	Byte	 00000533 _DATA	
oops1  . . . . . . . . . . . . .	Byte	 0000016F _DATA	
progAuth . . . . . . . . . . . .	Byte	 00000018 _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 000001C8 _DATA	
secMedian  . . . . . . . . . . .	DWord	 0000054B _DATA	
sorted . . . . . . . . . . . . .	Byte	 0000050E _DATA	
spaces . . . . . . . . . . . . .	Byte	 0000052E _DATA	
unsorted . . . . . . . . . . . .	Byte	 000004EC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
