Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/04/17 13:31:39
8Designing low-level I/O procedures     (CS271_Prog6.asm     Page 1 - 1


				TITLE Designing low-level I/O procedures     (CS271_Prog6.asm)

				; Author: Erin Alltop
				; Email: alltope@oregonstate.edu
				; Course / Project ID: CS271-400 / Program 6                
				; Due Date: 6-12-17
				; Description: This program uses macros and procedures to get 10 valid unsigned integers from the user as a
				; string, converts the string to numeric values, validates user input, stores the values into an array,
				; and then displays the integers, their sum, and their average.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				displayString	MACRO	printMe                                  
					push	edx                                                         
				    mov     edx, OFFSET printMe
				    call    WriteString
				    pop     edx                                                         
				ENDM

				getString	MACRO	var, string         
				    push    ecx
				    push    edx
				    displayString string                    
				    mov     edx,OFFSET var                
				    mov     ecx,(SIZEOF var) - 1                                        
				    call    ReadString
				    pop     edx
				    pop     ecx
				ENDM

 00000000			.data

 = 0000000A			MAX_INPUT =	10
 = 00000030			CHAR_SUB = 48 ; Number to subtract in number conversion

 00000000 44 65 73 69 67	progName	 BYTE	"Designing low-level I/O procedures", 0
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 00
 00000023 50 72 6F 67 72	progAuth	 BYTE	"Programmed by Erin Alltop", 0
	   61 6D 6D 65 64
	   20 62 79 20 45
	   72 69 6E 20 41
	   6C 6C 74 6F 70
	   00
 0000003D 50 6C 65 61 73	instr1		 BYTE	"Please provide 10 unsigned decimal integers. ", 0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 75 6E
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 20
	   00
 0000006B 45 61 63 68 20	instr2		 BYTE	"Each number needs to be small enough to fit inside a 32 bit register. ", 0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   00
 000000B2 41 66 74 65 72	instr3		 BYTE	"Afterwards, I will display a list of the integers, their sum, and their average value. ", 0
	   77 61 72 64 73
	   2C 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 6F
	   66 20 74 68 65
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 69
	   72 20 73 75 6D
	   2C 20 61 6E 64
	   20 74 68 65 69
	   72 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   2E 20 00
 0000010A 50 6C 65 61 73	getNum		 BYTE	"Please enter an unsigned integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 0000012D 54 68 61 74 27	goodbye 	 BYTE	"That's all for now! Goodbye. ", 0
	   73 20 61 6C 6C
	   20 66 6F 72 20
	   6E 6F 77 21 20
	   47 6F 6F 64 62
	   79 65 2E 20 00
 0000014B 45 52 52 4F 52	oopsMsg		 BYTE	"ERROR invalid entry. Please enter an unsigned integer only: ", 0
	   20 69 6E 76 61
	   6C 69 64 20 65
	   6E 74 72 79 2E
	   20 50 6C 65 61
	   73 65 20 65 6E
	   74 65 72 20 61
	   6E 20 75 6E 73
	   69 67 6E 65 64
	   20 69 6E 74 65
	   67 65 72 20 6F
	   6E 6C 79 3A 20
	   00
 00000188 54 68 65 20 73	intSum       BYTE   "The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001A6 54 68 65 20 61	intAve       BYTE   "The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001B7 2C 20 00		spaceBtwn    BYTE   ", ", 0
 000001BA 59 6F 75 20 65	listTitle    BYTE   "You entered the following numbers: ", 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001DE  0000000A [		intArray     DWORD  10 DUP(?)
	    00000000
	   ]
 00000206  00000014 [		buffer		 BYTE   20 DUP(?)
	    00
	   ]
 0000021A 00000000		count        DWORD  0
 0000021E 00000000		arraySum     DWORD  0
 00000222 00000000		tempNum		 DWORD  0
 00000226 00000000		tempRes		 DWORD	?

 00000000			.code

 00000000			main PROC

				; Introduction and instructions
 00000000  68 00000000 R		push	OFFSET progName
 00000005  68 00000023 R		push	OFFSET progAuth
 0000000A  68 0000003D R		push	OFFSET instr1
 0000000F  68 0000006B R		push	OFFSET instr2
 00000014  68 000000B2 R		push	OFFSET instr3
 00000019  E8 00000051			call	introduction

 0000001E  B9 0000000A		    mov     ecx, MAX_INPUT           ; MAX_INPUT placed into ecx counter

				; Use readVal to get 10 numbers from the user
 00000023			GETDATA:							 
 00000023  68 000001DE R		push	OFFSET intArray          
 00000028  FF 35 0000021A R	    push	count                  
 0000002E  E8 0000008E		    call	readVal                  
 00000033  FF 05 0000021A R	    inc		count               
 00000039  E2 E8		    loop	GETDATA					; loop 10 times to get 10 user inputted integers
				         
				; Use writeVal to print the array
 0000003B  68 000001BA R	    push	OFFSET listTitle
 00000040  68 000001DE R		push	OFFSET intArray                  
 00000045  6A 0A		    push	MAX_INPUT                     
 00000047  E8 00000115		    call	writeVal 

				; Calculate the sum and average of the array
 0000004C  68 000001DE R	    push	OFFSET intArray                      
 00000051  6A 0A		    push	MAX_INPUT                          
 00000053  FF 35 0000021E R	    push	arraySum
 00000059  E8 00000146		    call	calculations                  

				; All done. Say goodbye!
 0000005E  68 0000012D R		push	OFFSET goodbye
 00000063  E8 0000018D			call	farewell

					exit
 00000068  6A 00	   *	    push   +000000000h
 0000006A  E8 00000000 E   *	    call   ExitProcess
 0000006F			main ENDP


				;**************************************************************
				; Procedure to introduce program to user
				; receives: prog name, author, and instructions for user
				; returns: none
				; preconditions: none
				; registers changed: edx
				;**************************************************************

 0000006F			introduction PROC
 0000006F  55				push	ebp						;setup the stack frame
 00000070  8B EC			mov		ebp, esp
 00000072  8B 55 18			mov		edx, [ebp+24]
 00000075  E8 00000000 E		call	WriteString				; display program name
 0000007A  E8 00000000 E		call	CrLf

 0000007F  8B 55 14			mov		edx, [ebp+20]
 00000082  E8 00000000 E		call	WriteString				; display author name
 00000087  E8 00000000 E		call	CrLf
 0000008C  E8 00000000 E		call	CrLf

 00000091  8B 55 10			mov		edx, [ebp+16]
 00000094  E8 00000000 E		call	WriteString				; program description1
 00000099  E8 00000000 E		call	CrLf

 0000009E  8B 55 0C			mov		edx, [ebp+12]
 000000A1  E8 00000000 E		call	WriteString				; program description2
 000000A6  E8 00000000 E		call	CrLf

 000000AB  8B 55 08			mov		edx, [ebp+8]
 000000AE  E8 00000000 E		call	WriteString				; instruction1
 000000B3  E8 00000000 E		call	CrLf
 000000B8  E8 00000000 E		call	CrLf

 000000BD  5D				pop		ebp
 000000BE  C2 0010			ret		16
 000000C1			introduction ENDP 

				;**************************************************************					
				; readVal procedure invokes the getString macro to get the user's
				; string of digits, then converts the digit string to numeric,
				; while validating the user's input.
				; receives: none
				; returns: array filled with validated user input
				; preconditions: none
				; registers changed: esi, ecx, al, edx, ebx
				; *************************************************************
 000000C1			readVal PROC
 000000C1  60				pushad
 000000C2  8B EC		    mov		ebp, esp				; setup the stack frame
 000000C4  C7 05 00000222 R		mov		tempNum, 0
	   00000000

 000000CE			TOP:
					getString buffer, getNum		; get an input from the user
 000000CE  51		     1	    push    ecx
 000000CF  52		     1	    push    edx
 000000D0  52		     2		push	edx                                                         
 000000D1  BA 0000010A R     2	    mov     edx, OFFSET getNum
 000000D6  E8 00000000 E     2	    call    WriteString
 000000DB  5A		     2	    pop     edx                                                         
 000000DC  BA 00000206 R     1	    mov     edx,OFFSET buffer                
 000000E1  B9 00000013	     1	    mov     ecx,(SIZEOF buffer) - 1                                        
 000000E6  E8 00000000 E     1	    call    ReadString
 000000EB  5A		     1	    pop     edx
 000000EC  59		     1	    pop     ecx
 000000ED  EB 1F		    jmp		VALIDATE	

 000000EF			TRYAGAIN:                           
					getString buffer, oopsMsg
 000000EF  51		     1	    push    ecx
 000000F0  52		     1	    push    edx
 000000F1  52		     2		push	edx                                                         
 000000F2  BA 0000014B R     2	    mov     edx, OFFSET oopsMsg
 000000F7  E8 00000000 E     2	    call    WriteString
 000000FC  5A		     2	    pop     edx                                                         
 000000FD  BA 00000206 R     1	    mov     edx,OFFSET buffer                
 00000102  B9 00000013	     1	    mov     ecx,(SIZEOF buffer) - 1                                        
 00000107  E8 00000000 E     1	    call    ReadString
 0000010C  5A		     1	    pop     edx
 0000010D  59		     1	    pop     ecx

 0000010E			VALIDATE:							; validate user input
 0000010E  8B C8		    mov		ecx, eax				; length of number goes into ecx counter
 00000110  BE 00000206 R	    mov		esi, OFFSET buffer

 00000115			VAL_LOOP:                           ; loop one at a time
 00000115  AC				lodsb
 00000116  83 F9 0A			cmp		ecx, MAX_INPUT			; lodsb sets ecx to number of digits, if this is greater than 10, it's larger than an unsigned int
 00000119  7F D4			jg		TRYAGAIN
 0000011B  3C 30		    cmp		al,48                    ; check to see if input is not a number - 0 = 48 in ASCII
 0000011D  7C D0		    jl      TRYAGAIN                        

 0000011F  3C 39		    cmp    al,57                    ; 9 = 57 in ASCII
 00000121  7F CC		    jg     TRYAGAIN    
					
				; Convert string to integer
 00000123  A3 00000226 R		mov		tempRes, eax
 00000128  8B 1D 00000222 R		mov		ebx, tempNum
 0000012E  B8 0000000A			mov		eax, 10	
 00000133  F7 E3			mul		ebx					; Multiply tempNum by 10
 00000135  A3 00000222 R		mov		tempNum, eax
 0000013A  A1 00000226 R		mov		eax, tempRes
 0000013F  83 E8 30			sub		eax, 48
 00000142  01 05 00000222 R		add		tempNum, eax		; tempNum contains number converted to int at end of loop
						                
 00000148  E2 CB		    loop   VAL_LOOP
 0000014A  EB 00		    jmp    KEEPGOING				

 0000014C			KEEPGOING:
 0000014C  8B 55 28		    mov    edx, [ebp+40]             ; @intArray
 0000014F  8B 5D 24		    mov    ebx, [ebp+36]             ; current count
 00000152  6B DB 04		    imul   ebx, 4                    ; DWORD = 4 byte, so multiply by 4 to find correct location
 00000155  A1 00000222 R		mov	   eax, tempNum
 0000015A  89 04 13		    mov    [edx+ebx], eax            ; insert value into array

 0000015D  61			    popad
 0000015E  C2 0008		    ret    8
 00000161			readVal ENDP

				;**************************************************************
				; writeVal procedure to convert a numeric value to a string of 
				; digits and invoke the displayString macro to produce the output
				; receives: intArray and MAX_INPUT
				; returns: none
				; preconditions: Array is full of user input 
				; registers changed: edi, ecx
				; *************************************************************
 00000161			writeVal PROC
 00000161  E8 00000000 E		call	CrLf
 00000166  55				push    ebp					; setup the stack frame
 00000167  8B EC		    mov     ebp, esp
 00000169  8B 55 10			mov		edx, [ebp+16]		; listTitle
 0000016C  8B 7D 0C		    mov     edi, [ebp+12]		; @intArray
 0000016F  8B 4D 08		    mov     ecx, [ebp+8]		; MAX_INPUT

					displayString listTitle
 00000172  52		     1		push	edx                                                         
 00000173  BA 000001BA R     1	    mov     edx, OFFSET listTitle
 00000178  E8 00000000 E     1	    call    WriteString
 0000017D  5A		     1	    pop     edx                                                         
 0000017E  E8 00000000 E		call	CrLf

 00000183			BEGIN:
 00000183  8B 07		    mov     eax, [edi]			; point first element to eax
 00000185  E8 00000000 E	    call    WriteDec			; print the number
 0000018A  83 F9 01		    cmp     ecx, 1              ; if ecx is equal to 1, we are on the last element and should skip the comma
 0000018D  74 0F		    je      SKIPCOMMA                       
					displayString spaceBtwn		; add a comma 
 0000018F  52		     1		push	edx                                                         
 00000190  BA 000001B7 R     1	    mov     edx, OFFSET spaceBtwn
 00000195  E8 00000000 E     1	    call    WriteString
 0000019A  5A		     1	    pop     edx                                                         
 0000019B  83 C7 04			add     edi, 4				; point to next element of the array

 0000019E			SKIPCOMMA:
 0000019E  E2 E3		    loop    BEGIN				; one last loop

 000001A0  5D			    pop    ebp
 000001A1  C2 0008		    ret    8
 000001A4			writeVal ENDP


				;**************************************************************
				; calculations procedure to find sum and average of array
				; receives: array, MAX_INPUT for counter, variable for sum of array
				; returns: sum and average of array
				; preconditions: array is filled with validated user input
				; registers changed: eax, ebx, edi
				; *************************************************************

 000001A4			calculations PROC
 000001A4  55				push	ebp
 000001A5  8B EC		    mov     ebp, esp			; setup the stack frame
 000001A7  8B 7D 10		    mov     edi, [ebp+16]		; @intArray
 000001AA  8B 4D 0C		    mov     ecx, [ebp+12]		; MAX_INPUT to counter
 000001AD  8B 5D 08		    mov     ebx, [ebp+8]		; arraySum variable

				; Calculate the sum of the numbers
 000001B0			BEGIN:
 000001B0  8B 07		    mov     eax, [edi]          ;move the number into eax
 000001B2  03 D8		    add     ebx, eax            ;add eax to the sum
 000001B4  83 C7 04		    add     edi, 4              ;move on to the next one
 000001B7  E2 F7		    loop    BEGIN

 000001B9  E8 00000000 E		call	CrLf
				    displayString intSum	; display sum title
 000001BE  52		     1		push	edx                                                         
 000001BF  BA 00000188 R     1	    mov     edx, OFFSET intSum
 000001C4  E8 00000000 E     1	    call    WriteString
 000001C9  5A		     1	    pop     edx                                                         
 000001CA  8B C3		    mov     eax, ebx		; arraySum is in eax
 000001CC  E8 00000000 E	    call    WriteDec
 000001D1  E8 00000000 E	    call    CrLf
				    
				; Calculate the average of the numbers
 000001D6  8B 5D 0C			mov		ebx, [ebp+12]	; move MAX_INPUT to ebx
 000001D9  BA 00000000			mov		edx, 0
 000001DE  F7 FB			idiv	ebx

					displayString intAve	; display average title
 000001E0  52		     1		push	edx                                                         
 000001E1  BA 000001A6 R     1	    mov     edx, OFFSET intAve
 000001E6  E8 00000000 E     1	    call    WriteString
 000001EB  5A		     1	    pop     edx                                                         

 000001EC  E8 00000000 E	    call    WriteDec
 000001F1  5D			    pop     ebp
 000001F2  C2 000C		    ret     12
 000001F5			calculations ENDP


				;**************************************************************
				; Procedure to say goodbye to the user
				; receives: goodbye message
				; returns: none
				; preconditions: none 
				; registers changed: edx
				; *************************************************************

 000001F5			farewell PROC
 000001F5  E8 00000000 E		call	CrLf
 000001FA  55				push	ebp						; setup the stack frame
 000001FB  8B EC			mov		ebp, esp
 000001FD  8B 55 08			mov		edx, [ebp+8]			; goodbye message
 00000200  E8 00000000 E		call	CrLf
 00000205  E8 00000000 E		call	WriteString				; say goodbye - see ya!
 0000020A  E8 00000000 E		call	CrLf
 0000020F  E8 00000000 E		call	CrLf
 00000214  5D				pop		ebp
 00000215  C2 0004			ret		4
 00000218			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/04/17 13:31:39
8Designing low-level I/O procedures     (CS271_Prog6.asm     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000022A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000218 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculations . . . . . . . . . .	P Near	 000001A4 _TEXT	Length= 00000051 Public STDCALL
  BEGIN  . . . . . . . . . . . .	L Near	 000001B0 _TEXT	
farewell . . . . . . . . . . . .	P Near	 000001F5 _TEXT	Length= 00000023 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 00000052 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006F Public STDCALL
  GETDATA  . . . . . . . . . . .	L Near	 00000023 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 000000A0 Public STDCALL
  TOP  . . . . . . . . . . . . .	L Near	 000000CE _TEXT	
  TRYAGAIN . . . . . . . . . . .	L Near	 000000EF _TEXT	
  VALIDATE . . . . . . . . . . .	L Near	 0000010E _TEXT	
  VAL_LOOP . . . . . . . . . . .	L Near	 00000115 _TEXT	
  KEEPGOING  . . . . . . . . . .	L Near	 0000014C _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000161 _TEXT	Length= 00000043 Public STDCALL
  BEGIN  . . . . . . . . . . . .	L Near	 00000183 _TEXT	
  SKIPCOMMA  . . . . . . . . . .	L Near	 0000019E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CHAR_SUB . . . . . . . . . . . .	Number	 00000030h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_INPUT  . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arraySum . . . . . . . . . . . .	DWord	 0000021E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000206 _DATA	
count  . . . . . . . . . . . . .	DWord	 0000021A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getNum . . . . . . . . . . . . .	Byte	 0000010A _DATA	
goodbye  . . . . . . . . . . . .	Byte	 0000012D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instr1 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
instr2 . . . . . . . . . . . . .	Byte	 0000006B _DATA	
instr3 . . . . . . . . . . . . .	Byte	 000000B2 _DATA	
intArray . . . . . . . . . . . .	DWord	 000001DE _DATA	
intAve . . . . . . . . . . . . .	Byte	 000001A6 _DATA	
intSum . . . . . . . . . . . . .	Byte	 00000188 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listTitle  . . . . . . . . . . .	Byte	 000001BA _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
oopsMsg  . . . . . . . . . . . .	Byte	 0000014B _DATA	
progAuth . . . . . . . . . . . .	Byte	 00000023 _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spaceBtwn  . . . . . . . . . . .	Byte	 000001B7 _DATA	
tempNum  . . . . . . . . . . . .	DWord	 00000222 _DATA	
tempRes  . . . . . . . . . . . .	DWord	 00000226 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
